name: CURSOR PROJECTS
jobs:
  Build:
    name: Build
    steps:
      - type: node-js
        shell-script: npm install
        docker-image: node:lts
    runs-on: Linux-Medium
  Test:
    name: Test
    runs-on: Linux-Medium
    steps:
      - type: node-js
        shell-script: |-
          npm install -g mocha
          npm install --save-dev start-server-and-test
        docker-image: node:lts
        name: Install Prerequisites
      - type: node-js
        shell-script: npx start-test 3000
        docker-image: node:lts
        name: Run tests
    dependencies:
      - Build
  DockerBuildPush:
    name: Docker Build & Push
    runs-on: Linux-Medium
    steps:
      - type: script
        script-content: docker build -t hello-world-node .
        name: Build
      - type: script
        name: Push
        script-content: |-
          docker tag hello-world-node:latest mitin20/hello-world-node:latest
          docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD% docker.io
          docker push mitin20/hello-world-node:latest
    dependencies:
      - Test
  DockerScan:
    name: Docker Scan
    runs-on: Linux-Medium
    steps:
      - type: script
        name: Scan image
        script-content: >-
          # Install Scout Alt Way

          #curl -fsSL
          https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o
          install-scout.sh

          #sh install-scout.sh

          # Install the Docker Scout CLI

          #curl -sSfL
          https://raw.githubusercontent.com/docker/scout-cli/main/install.sh |
          sh -s --

          # Login to Docker Hub required for Docker Scout CLI

          docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%

          # Get a CVE report for the built image and fail the pipeline when
          critical or high CVEs are detected

          docker scout cves mitin20/hello-world-node:latest --exit-code
          --only-severity critical,high
        dockerfile-source: FROM docker/scout-cli
    dependencies:
      - DockerBuildPush
secrets:
  DOCKER_USERNAME: credentialsJSON:aeff4c24-9874-4e1e-ae49-5cce5a63039f
  DOCKER_PASSWORD: credentialsJSON:c7c87923-d5ac-4a9a-8f8d-cbd6748222ce
